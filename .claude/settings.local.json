{
  "permissions": {
    "allow": [
      "WebFetch(domain:github.com)",
      "Bash(mkdir:*)",
      "Bash(find:*)",
      "Bash(python test:*)",
      "Bash(python:*)",
      "Bash(pip install:*)",
      "Bash(cargo install:*)",
      "Bash(cargo:*)",
      "Bash(docker build:*)",
      "Bash(brew install:*)",
      "Bash(ls:*)",
      "Bash(docker run:*)",
      "Bash(grep:*)",
      "Bash(\"/Applications/IDA Professional 9.1.app/Contents/MacOS/tools/flair/pelf\" temp_objects/*.o)",
      "Bash(nm:*)",
      "Bash(\"/Applications/IDA Professional 9.1.app/Contents/MacOS/tools/flair/pelf\")",
      "Bash(cat:*)",
      "Bash(objdump:*)",
      "Bash(\"/Applications/IDA Professional 9.1.app/Contents/MacOS/tools/flair/sigmake\" temp_signatures/custom_solana.pat temp_signatures/custom_solana.sig)",
      "Bash(\"/Applications/IDA Professional 9.1.app/Contents/MacOS/tools/flair/sigmake\" temp_signatures/proper_solana.pat temp_signatures/proper_solana.sig)",
      "Bash(\"/Applications/IDA Professional 9.1.app/Contents/MacOS/tools/flair/sigmake\" temp_signatures/standard_solana.pat temp_signatures/standard_solana.sig)",
      "WebFetch(domain:bbs.kanxue.com)",
      "Bash(rm:*)",
      "Bash(/Applications/IDA\\ Professional\\ 9.1.app/Contents/MacOS/tools/flair/sigmake:*)",
      "Bash(/Applications/IDA\\ Professional\\ 9.1.app/Contents/MacOS/tools/flair/sigmake:*)",
      "Bash(/Applications/IDA\\ Professional\\ 9.1.app/Contents/MacOS/tools/flair/sigmake:*)",
      "Bash(mv:*)",
      "Bash(cp:*)",
      "Bash(git clone:*)",
      "Bash(rustup target:*)",
      "Bash(rustc:*)",
      "Bash(ar:*)",
      "Bash(rustup show:*)",
      "Bash(rustup toolchain:*)",
      "Bash(rustup component:*)",
      "Bash(rustup:*)",
      "Bash(echo)",
      "Bash(echo:*)",
      "mcp__context7__resolve-library-id",
      "Bash(chmod:*)",
      "Bash(gcc:*)",
      "Bash(for:*)",
      "Bash(do echo \"=== $dir ===\")",
      "Bash(done)",
      "Bash(g++:*)",
      "Bash(do echo \"Regenerating $lib...\")",
      "Bash(/dev/null)",
      "Bash(clang:*)",
      "Bash(timeout 10s clang++:*)",
      "Bash(do echo \"=== 修复 $lib 头文件 ===\")",
      "Bash(sed:*)",
      "WebFetch(domain:docs.hex-rays.com)",
      "Bash(\"/Applications/IDA Professional 9.1.app/Contents/MacOS/tools/idaclang/idaclang\" --help)",
      "Bash(\"/Applications/IDA Professional 9.1.app/Contents/MacOS/tools/idaclang/idaclang\" -target x86_64-apple-darwin -x c++ -std=c++11 --idaclang-tilname rust_core_1_84_1.til --idaclang-tildesc \"Rust Core Library v1.84.1 Types\" core_1_84_1/types.hpp)",
      "Bash(\"/Applications/IDA Professional 9.1.app/Contents/MacOS/tools/tilib/tilib\" -l rust_core_1_84_1.til)",
      "Bash(\"/Applications/IDA Professional 9.1.app/Contents/MacOS/tools/idaclang/idaclang\" -target x86_64-apple-darwin -x c++ -std=c++11 --idaclang-tilname rust_alloc_1_84_1.til --idaclang-tildesc \"Rust Alloc Library v1.84.1 Types\" alloc_1_84_1/types.hpp)",
      "Bash(\"/Applications/IDA Professional 9.1.app/Contents/MacOS/tools/idaclang/idaclang\" -target x86_64-apple-darwin -x c++ -std=c++11 --idaclang-tilname core_1_84_1/rust_core_1_84_1.til --idaclang-tildesc \"Rust Core Library v1.84.1 Types\" core_1_84_1/types.hpp)",
      "Bash(\"/Applications/IDA Professional 9.1.app/Contents/MacOS/tools/idaclang/idaclang\" -target x86_64-apple-darwin -x c++ -std=c++11 --idaclang-tilname alloc_1_84_1/rust_alloc_1_84_1.til --idaclang-tildesc \"Rust Alloc Library v1.84.1 Types\" alloc_1_84_1/types.hpp)",
      "Bash(\"/Applications/IDA Professional 9.1.app/Contents/MacOS/tools/idaclang/idaclang\" -target x86_64-apple-darwin -x c++ -std=c++11 --idaclang-tilname std_1_84_1/rust_std_1_84_1.til --idaclang-tildesc \"Rust Std Library v1.84.1 Types\" std_1_84_1/types.hpp)",
      "Bash(true)",
      "Bash(\"/Applications/IDA Professional 9.1.app/Contents/MacOS/tools/tilib/tilib\" -l \"/Applications/IDA Professional 9.1.app/Contents/MacOS/til/rust/rust_core_gnulnx_x64.til\")",
      "Bash(CARGO_PROFILE_RELEASE_DEBUG=true CARGO_PROFILE_RELEASE_LTO=false CARGO_PROFILE_DEV_DEBUG=true RUSTFLAGS='-C debuginfo=2 -C embed-bitcode=yes' cargo build --target x86_64-unknown-linux-gnu)",
      "mcp__ide__getDiagnostics",
      "mcp__ide__executeCode",
      "WebFetch(domain:docs.anthropic.com)",
      "Bash(npm install:*)",
      "Bash(claude mcp add filesystem:*)",
      "Bash(claude mcp add:*)",
      "Bash(timeout:*)",
      "Bash(mcp-server-filesystem:*)",
      "Bash(claude mcp remove:*)",
      "mcp__filesystem-global__list_allowed_directories",
      "mcp__filesystem-global__list_directory",
      "mcp__playwright-mcp__playwright_navigate",
      "mcp__playwright-mcp__playwright_screenshot",
      "mcp__playwright-mcp__playwright_get_visible_text",
      "mcp__playwright-mcp__playwright_close",
      "mcp__filesystem-global__directory_tree",
      "mcp__filesystem-global__read_multiple_files",
      "Bash(readelf:*)"
    ],
    "deny": []
  },
  "model": "sonnet",
  "enableAllProjectMcpServers": false
}